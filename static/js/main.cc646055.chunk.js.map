{"version":3,"sources":["helpers.js","hymnResult.jsx","App.js","reportWebVitals.js","index.js"],"names":["mergeSort","arr","comparisonFunc","length","half","left","slice","right","leftCopy","rightCopy","output","push","shift","concat","merge","HymnResult","props","Card","style","marginTop","variant","CardContent","Typography","component","title","color","author","scripture","originalLanguage","CardActions","display","justifyContent","Button","onClick","window","open","textLink","size","defaultProps","appTheme","createMuiTheme","palette","primary","main","secondary","BoxWrapper","styled","div","App","useState","inputValue","setInputValue","hymnData","setHymnData","waitingResponse","setWaitingResponse","showError","setShowError","showAdvanced","setShowAdvanced","sortMethods","name","nameDesc","authorDesc","sortBy","setSortBy","ThemeProvider","theme","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","Alert","severity","flexDirection","textAlign","paddingLeft","paddingRight","paddingTop","fontSize","icon","faCross","TextField","value","onChange","e","String","target","width","id","label","fetch","then","response","json","data","catch","error","finally","FormControlLabel","control","Switch","checked","Collapse","in","Fragment","InputLabel","Select","Object","keys","map","key","MenuItem","padding","CircularProgress","hymnKeys","keyA","keyB","undefined","sortHymnData","hymnKey","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc646055.chunk.js","sourcesContent":["// Helper functions\n\n\n// Merges the two arrays\nfunction merge (left, right, comparisonFunc) {\n  const leftCopy = [...left];\n  const rightCopy = [...right];\n  const output = [];\n  // Merge the two arrays\n  while (leftCopy.length !== 0 && rightCopy.length !== 0) {\n    if (comparisonFunc(leftCopy[0], rightCopy[0])) {\n      output.push(leftCopy.shift());\n    } else {\n      output.push(rightCopy.shift());\n    }\n  }\n  // Combine just in case there are still left overs\n  return output.concat(leftCopy).concat(rightCopy);\n}\n\n/**\n * Pass in the array to be sorted\n * and a comparison function which\n * gives true if a should be put in front of b\n * and false if a should be put behind b\n * @param {*} arr \n * @param {*} comparisonFunc \n * @returns \n */\nexport function mergeSort (arr, comparisonFunc) {\n  // Return the array if there is only one element\n  if (arr.length < 2) {\n    return arr;\n  }\n  // Find the half way point\n  const half = arr.length / 2;\n  // Split the array\n  const left = arr.slice(0, half);\n  const right = arr.slice(half, arr.length);\n  return merge(\n    mergeSort(left, comparisonFunc),\n    mergeSort(right, comparisonFunc),\n    comparisonFunc\n  )\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card,\n  CardContent,\n  Typography,\n  CardActions,\n  Button } from '@material-ui/core';\n\nexport default function HymnResult (props) {\n  const lyricsOnClick = () => {\n    window.open(props.textLink)\n  }\n  return (\n    <Card style={{ marginTop: '15px' }} variant='outlined'>\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\">\n          {props.title}\n        </Typography>\n        <Typography color=\"textSecondary\">\n          {props.author}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          {props.scripture}\n        </Typography>\n        <Typography color=\"textSecondary\">\n          {props.originalLanguage}\n        </Typography>\n      </CardContent>\n      <CardActions style={{display: 'flex', justifyContent: 'center'  }}>\n        <Button onClick={lyricsOnClick} size=\"small\" color=\"primary\">\n          Lyrics\n        </Button>\n      </CardActions>\n    </Card>\n  )\n}\n\nHymnResult.propTypes = {\n  title: PropTypes.string,\n  originalLanguage: PropTypes.string,\n  scripture: PropTypes.string,\n  author: PropTypes.string,\n  textLink: PropTypes.string,\n}\n\nHymnResult.defaultProps = {\n  title: '',\n  originalLanguage: '',\n  scripture: '',\n  author: '',\n  textLink: '',\n}","import './App.css';\nimport { mergeSort } from './helpers.js';\nimport {\n  TextField,\n  Button,\n  CircularProgress,\n  Typography,\n  createMuiTheme,\n  ThemeProvider,\n  Snackbar,\n  InputLabel,\n  Select,\n  MenuItem,\n  Collapse,\n  Switch,\n  FormControlLabel\n} from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport { useState } from 'react';\nimport HymnResult from './hymnResult.jsx';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCross } from '@fortawesome/free-solid-svg-icons'\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst appTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#EB4B64',\n    },\n    secondary: {\n      main: '#F7BBD0',\n    },\n  }\n})\n\nconst BoxWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: sticky;\n  top: 0;\n  background-color: #FFFFFF;\n  z-index: 1;\n  padding-bottom: 20px;\n  padding-top: 20px;\n  * {\n    margin-bottom: 10px;\n  }\n`\n\nfunction App() {\n  const [inputValue, setInputValue] = useState('');\n  const [hymnData, setHymnData] = useState();\n  const [waitingResponse, setWaitingResponse] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const sortMethods = {\n    name: 'Name (Ascending)',\n    nameDesc: 'Name (Descending)',\n    author: 'Author (Ascending)',\n    authorDesc: 'Author (Descending)'\n  }\n  const [sortBy, setSortBy] = useState(sortMethods.name)\n  const pageStyle = {\n    display: 'flex',\n    flexDirection: 'column',\n    textAlign: 'center',\n    justifyContent: 'center',\n    paddingLeft: '5%',\n    paddingRight: '5%',\n    paddingTop: '20vh',\n  }\n  /**\n   * Called when the search button is pressed\n   */\n  const onSearch = () => {\n    setWaitingResponse(true);\n    // Fetch data\n    fetch(`https://hymnary.org/api/scripture?reference=${inputValue}`)\n      .then(response => {\n        return response.json()\n      })\n      .then(data => {\n        setHymnData(data);\n      })\n      .catch((error) => {\n        setShowError(true);\n      })\n      .finally(() => setWaitingResponse(false))\n  }\n  /**\n   * Given a list of hymn keys, sort them based on\n   * the value set in sortBy and return the new array\n   * @param {*} hymnKeys \n   */\n  const sortHymnData = (hymnKeys) => {\n    switch (sortBy) {\n      case sortMethods.name:\n        return mergeSort(hymnKeys, (keyA, keyB) => keyA < keyB);\n      case sortMethods.nameDesc:\n        return mergeSort(hymnKeys, (keyA, keyB) => keyA > keyB);\n      case sortMethods.author:\n        return mergeSort(hymnKeys, (keyA, keyB) => {\n          // Case where B is undefined\n          if (hymnData[keyB].author === undefined) {\n            return true;\n          }\n          return hymnData[keyA].author < hymnData[keyB].author;\n        });\n      case sortMethods.authorDesc:\n        return mergeSort(hymnKeys, (keyA, keyB) => {\n          // Case where B is undefined\n          if (hymnData[keyB].author === undefined) {\n            return true;\n          }\n          return hymnData[keyA].author > hymnData[keyB].author;\n        });\n      default:\n        return hymnKeys;\n    }\n  }\n  /**\n   * Renders the hymn data\n   */\n  const renderHymnData = () => {\n    // Return nothing if there is no data\n    if (!hymnData || Object.keys(hymnData).length === 0) {\n      return (null);\n    }\n    // Render\n    return sortHymnData(Object.keys(hymnData)).map((hymnKey) => {\n        const data = hymnData[hymnKey];\n        return <HymnResult\n          key={hymnKey}\n          title={hymnKey}\n          originalLanguage={data['original language']}\n          scripture={data['scripture references']}\n          author={data.author}\n          textLink={data['text link']}\n        />\n      }\n    )\n  }\n  /**\n   * Creates the loading icon\n   */\n  const renderWaiting = () => {\n    if (waitingResponse) {\n      return (\n      <div style={{ display: 'flex',\n        justifyContent: 'center',\n        padding: '20px' }}>\n        <CircularProgress/>\n      </div>\n      )\n    }\n    return (null)\n  }\n  /**\n   * Renders the sort by select\n   */\n  const renderSortBy = () => {\n    return (\n      <React.Fragment>\n        <InputLabel>Sort Order</InputLabel>\n        <Select\n          value={sortBy}\n          onChange={(e) => setSortBy(e.target.value)}\n        >\n          {Object.keys(sortMethods).map((key) => {\n            return (\n              <MenuItem key={key} value={sortMethods[key]}>{sortMethods[key]}</MenuItem>\n            )\n          })}\n        </Select>\n      </React.Fragment>\n    )\n  }\n  return (\n    <ThemeProvider theme={appTheme}>\n      <Snackbar anchorOrigin={{vertical: 'top', horizontal: 'center'}} open={showError} autoHideDuration={6000} onClose={() => {setShowError(false)}}>\n        <Alert severity='error'>Could not find the given bible verse</Alert>\n      </Snackbar>\n      <div style={pageStyle}>\n        <BoxWrapper>\n          <Typography style={{ fontSize: '5vh' }} variant='h2' component='h2'>\n            <FontAwesomeIcon icon={faCross}/>  Hymn Finder\n          </Typography>\n          <Typography color='textSecondary'>\n            By Ashley Cheung\n          </Typography>\n          <TextField\n            value={inputValue}\n            onChange={(e) => {setInputValue(String(e.target.value))}}\n            style={{ width: '100%' }}\n            id='standard-basic'\n            label='Bible Verse'/>\n          <Button onClick={onSearch}\n            color='primary'\n            variant='contained'>Search Hymn</Button>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={showAdvanced}\n                onChange={(e) => setShowAdvanced(e.target.checked)}\n                color='primary'\n              />\n            }\n            label='Advanced Search'\n          />\n          <Collapse in={showAdvanced}>\n            { renderSortBy() }\n          </Collapse>\n        </BoxWrapper>\n        { renderWaiting() }\n        { renderHymnData() }\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}